// This file is auto-generated by restructure-translations.js
// Do not edit manually

import i18n from "i18next";
import { initReactI18next } from "react-i18next";
import LanguageDetector from "i18next-browser-languagedetector";
import Backend from "i18next-http-backend";

// Define supported languages
export const SUPPORTED_LANGUAGES = {
  en: { nativeName: "English", flag: "ðŸ‡¬ðŸ‡§" },
  nl: { nativeName: "Nederlands", flag: "ðŸ‡³ðŸ‡±" },
  fr: { nativeName: "FranÃ§ais", flag: "ðŸ‡«ðŸ‡·" },
  de: { nativeName: "Deutsch", flag: "ðŸ‡©ðŸ‡ª" },
};

// Define namespaces
export const NAMESPACES = [
  "common",
  "auth",
  "dashboard",
  "transactions",
  "budgets",
  "goals",
  "bills",
  "categories",
  "settings",
  "groups",
  "nav",
  "errors"
];

// Import translations
import en_common from "./locales/en/common.json";
import nl_common from "./locales/nl/common.json";
import fr_common from "./locales/fr/common.json";
import de_common from "./locales/de/common.json";

// Initialize resources with common namespace (others will be loaded on demand)
const resources = {
  en: {
    common: en_common
  },
  nl: {
    common: nl_common
  },
  fr: {
    common: fr_common
  },
  de: {
    common: de_common
  }
};

// Initialize i18next
i18n
  // Load translations from backend for other namespaces
  .use(Backend)
  // Detect user language
  .use(LanguageDetector)
  // Pass the i18n instance to react-i18next
  .use(initReactI18next)
  // Initialize
  .init({
    resources,
    ns: ["common", ...NAMESPACES],
    defaultNS: "common",
    fallbackLng: "en",
    debug: process.env.NODE_ENV === "development",
    interpolation: {
      escapeValue: false,
    },
    detection: {
      order: ["localStorage", "navigator"],
      lookupLocalStorage: "language",
      caches: ["localStorage"],
    },
    backend: {
      loadPath: "/src/i18n/locales/{{lng}}/{{ns}}.json",
    },
  });

export { i18n };

// Helper function to change language
export const changeLanguage = async (lang: string): Promise<void> => {
  await i18n.changeLanguage(lang);
  
  // Update localStorage
  try {
    const userSettings = localStorage.getItem("userSettings");
    if (userSettings) {
      const settings = JSON.parse(userSettings);
      settings.language = lang;
      localStorage.setItem("userSettings", JSON.stringify(settings));
    } else {
      localStorage.setItem("userSettings", JSON.stringify({ language: lang }));
    }
  } catch (error) {
    console.error("Error updating user settings:", error);
  }
};

// Export a type-safe translation function
export const t = (key: string, options?: Record<string, any>): string => {
  return i18n.t(key, options);
};

// Export a hook for functional components
export const useTranslation = () => {
  return {
    t,
    i18n,
    changeLanguage,
  };
};